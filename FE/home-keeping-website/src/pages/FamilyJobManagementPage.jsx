import React, { useState, useEffect } from "react";
import { useTranslation } from "react-i18next";
import { useSearchParams } from "react-router-dom";
import axios from "axios";
import { FaMapMarkerAlt, FaMoneyBillWave } from "react-icons/fa";
import "../assets/styles/Job.css";

const generateFakeJobs = () => {
    const titles = [
        "D·ªçn d·∫πp nh√† c·ª≠a", "N·∫•u ƒÉn gia ƒë√¨nh", "ChƒÉm s√≥c tr·∫ª em",
        "Gi·∫∑t gi≈© qu·∫ßn √°o", "V·ªá sinh nh√† t·∫Øm", "R·ª≠a ch√©n b√°t",
        "D·ªçn d·∫πp s√¢n v∆∞·ªùn", "·ª¶i qu·∫ßn √°o", "N·∫•u ti·ªác cu·ªëi tu·∫ßn", "T·ªïng v·ªá sinh ng√†y l·ªÖ"
    ];
    const locations = ["Qu·∫≠n 1", "Qu·∫≠n 3", "G√≤ V·∫•p", "T√¢n B√¨nh", "B√¨nh Th·∫°nh", "Th·ªß ƒê·ª©c"];
    const types = ["D·ªçn d·∫πp", "N·∫•u ƒÉn"];
    const statuses = [0, 1, 2];

    return Array.from({ length: 40 }, (_, i) => {
        const randomDaysAgo = Math.floor(Math.random() * 15);
        return {
            jobID: i + 1,
            title: titles[Math.floor(Math.random() * titles.length)],
            location: locations[Math.floor(Math.random() * locations.length)],
            salary: Math.floor(Math.random() * 100000) + 50000,
            jobType: types[Math.floor(Math.random() * types.length)],
            status: statuses[Math.floor(Math.random() * statuses.length)],
            postedDate: new Date(Date.now() - randomDaysAgo * 86400000).toISOString()
        };
    });
};

const FamilyJobManagePage = () => {
    const { t } = useTranslation();
    const [searchParams] = useSearchParams();
    const isDemo = searchParams.get("demo") === "true";

    const [jobs, setJobs] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    const [filter, setFilter] = useState({ status: "T·∫•t c·∫£", jobType: "T·∫•t c·∫£", date: "" });
    const [activeTab, setActiveTab] = useState("active");

    useEffect(() => {
        if (isDemo) {
            setJobs(generateFakeJobs());
            setLoading(false);
            setError(null);
            return;
        }

        setLoading(true);
        setError(null);

        const accountID = localStorage.getItem("accountID");
        const authToken = localStorage.getItem("authToken");

        if (!accountID || !authToken) {
            setError("Thi·∫øu th√¥ng tin ƒëƒÉng nh·∫≠p.");
            setLoading(false);
            return;
        }

        const headers = {
            Authorization: `Bearer ${authToken}`,
            "Content-Type": "application/json"
        };

        axios.get(`http://localhost:5280/api/Family/GetFamilyByAccountID?id=${accountID}`, { headers })
            .then((res) => {
                const family = res.data;
                if (!family || !family.familyID) throw new Error("Kh√¥ng t√¨m th·∫•y th√¥ng tin Family.");

                axios.get(`http://localhost:5280/api/Job/GetJobsByFamilyID?familyID=${family.familyID}`, { headers })
                    .then((res2) => {
                        setJobs(res2.data || []);
                    })
                    .catch((err) => {
                        console.error("L·ªói khi l·∫•y danh s√°ch c√¥ng vi·ªác:", err);
                        setError("Kh√¥ng th·ªÉ t·∫£i c√¥ng vi·ªác.");
                    })
                    .finally(() => {
                        setLoading(false);
                    });
            })
            .catch((err) => {
                console.error("L·ªói khi l·∫•y Family:", err);
                setError("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng.");
                setLoading(false);
            });
    }, [isDemo]);

    if (loading) {
        return (
            <div className="dashboard-container">
                <span className="icon-loading"></span>
                <p>{t("loading_data")}</p>
            </div>
        );
    }

    if (error) {
        return (
            <div className="dashboard-container">
                <p className="error">‚ùå {error}</p>
                {!isDemo && (
                    <button className="btn-secondary" onClick={() => window.location.search = "?demo=true"}>
                        {t("view_demo")}
                    </button>
                )}
            </div>
        );
    }

    const filteredJobs = jobs.filter(job => {
        const { status, jobType, date } = filter;
        if (status !== "T·∫•t c·∫£" && job.status.toString() !== status) return false;
        if (jobType !== "T·∫•t c·∫£" && job.jobType !== jobType) return false;
        if (date && job.postedDate.slice(0, 10) !== date) return false;

        if (activeTab === "active") return job.status === 0;
        if (activeTab === "hired") return job.status === 1;
        if (activeTab === "completed") return job.status === 2;
        return true;
    });

    return (
        <div className="job-management-page">
            {/* HEADER TH·ªêNG K√ä */}
            <div className="job-management-header">
                <div className="job-management-stat">
                    <p className="title">{t("jobs_posted")}</p>
                    <div className="value">
                        15 <i className="fa-solid fa-briefcase icon" />
                    </div>
                </div>
                <div className="job-management-stat">
                    <p className="title">{t("jobs_completed")}</p>
                    <div className="value">
                        8 <i className="fa-solid fa-check-circle icon" />
                    </div>
                </div>
                <div className="job-management-stat">
                    <p className="title">{t("jobs_waiting")}</p>
                    <div className="value">
                        2M+{" "}
                        <button className="btn-primary-small">{t("post_now")}</button>
                    </div>
                </div>
            </div>

            {/* B·ªê C·ª§C TR√ÅI-PH·∫¢I */}
            <div className="job-management-layout">
                <div className="job-management-filters">
                    <label>{t("status")}</label>
                    <select value={filter.status} onChange={(e) => setFilter({ ...filter, status: e.target.value })}>
                        <option value="T·∫•t c·∫£">{t("all")}</option>
                        <option value="0">{t("recruiting")}</option>
                        <option value="1">{t("hired")}</option>
                        <option value="2">{t("completed")}</option>
                    </select>

                    <label>{t("job_type")}</label>
                    <select value={filter.jobType} onChange={(e) => setFilter({ ...filter, jobType: e.target.value })}>
                        <option value="T·∫•t c·∫£">{t("all_job_types")}</option>
                        <option value="D·ªçn d·∫πp">{t("cleaning")}</option>
                        <option value="N·∫•u ƒÉn">{t("cooking")}</option>
                    </select>

                    <label>{t("date")}</label>
                    <input
                        type="date"
                        value={filter.date}
                        onChange={(e) => setFilter({ ...filter, date: e.target.value })}
                    />
                </div>

                <div className="job-management-content">
                    <div className="job-management-tabs">
                        {["active", "hired", "completed"].map((key) => (
                            <span
                                key={key}
                                className={activeTab === key ? "active-tab" : ""}
                                onClick={() => setActiveTab(key)}
                            >
                                {t(key)}
                            </span>
                        ))}
                    </div>

                    {filteredJobs.length === 0 ? (
                        <p>{t("no_jobs_found")}</p>
                    ) : (
                        <div className="job-management-list">
                            {filteredJobs.map((job) => (
                                <div key={job.jobID} className="job-management-card">
                                    <h3 className="job-management-title">{job.title}</h3>
                                    <div className="job-management-info">
                                        <span>üìÖ {t("posted_days_ago", { days: Math.floor((Date.now() - new Date(job.postedDate)) / 86400000) })}</span>
                                        <span><FaMapMarkerAlt /> {job.location}</span>
                                        <span><FaMoneyBillWave /> {job.salary.toLocaleString()} VND/gi·ªù</span>
                                    </div>
                                    <div className={`job-management-status status-${job.status}`}>
                                        {job.status === 0 ? t("recruiting") : job.status === 1 ? t("hired") : t("completed")}
                                    </div>
                                    <div className="job-management-actions">
                                        <button className="btn-secondary">{t("edit")}</button>
                                        <button className="btn-cancel">{t("delete")}</button>
                                        <button className="btn-primary">
                                            {job.status === 0 ? t("view_applicants") : t("view_detail")}
                                        </button>
                                    </div>
                                </div>
                            ))}
                        </div>
                    )}
                </div>
            </div>
        </div>
    );

};

export default FamilyJobManagePage;
