import React, { useState } from "react";
import axios from "axios";
import "../assets/styles/Job.css";

const JobPostingPage = () => {
    const [formData, setFormData] = useState({
        AccountID: "",
        JobName: "",
        Frequency: "",
        Location: "",
        Price: "",
        ServiceID: "",
        StartDate: "",
        EndDate: "",
        Description: "",
        StartSlot: "",
        EndSlot: "",
    });

    const [loading, setLoading] = useState(false);
    const [message, setMessage] = useState(null);
    const [error, setError] = useState(null);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData((prev) => ({
            ...prev,
            [name]: value,
        }));
    };

    const validateForm = () => {
        if (!formData.AccountID || !formData.JobName || !formData.Frequency || !formData.Location ||
            !formData.ServiceID || !formData.StartDate || !formData.EndDate ||
            !formData.StartSlot || !formData.EndSlot || formData.Price < 0) {
            return "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin h·ª£p l·ªá.";
        }

        if (formData.JobName.length > 255 || formData.Frequency.length > 100 || formData.Location.length > 255) {
            return "M·ªôt s·ªë tr∆∞·ªùng v∆∞·ª£t qu√° gi·ªõi h·∫°n k√Ω t·ª± cho ph√©p.";
        }

        if (formData.Description && formData.Description.length > 500) {
            return "M√¥ t·∫£ c√¥ng vi·ªác kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 500 k√Ω t·ª±.";
        }

        if (new Date(formData.StartDate) > new Date(formData.EndDate)) {
            return "Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng th·ªÉ l·ªõn h∆°n ng√†y k·∫øt th√∫c.";
        }

        if (parseInt(formData.StartSlot) >= parseInt(formData.EndSlot)) {
            return "Gi·ªù b·∫Øt ƒë·∫ßu ph·∫£i nh·ªè h∆°n gi·ªù k·∫øt th√∫c.";
        }

        return null;
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);
        setMessage(null);
        setError(null);

        const validationError = validateForm();
        if (validationError) {
            setError(validationError);
            setLoading(false);
            return;
        }

        try {
            await axios.post("http://localhost:5280/api/Job/AddJob", formData, {
                headers: { "Content-Type": "application/json" },
            });

            setMessage("üéâ C√¥ng vi·ªác ƒë√£ ƒë∆∞·ª£c ƒëƒÉng th√†nh c√¥ng!");
            setFormData({
                AccountID: "",
                JobName: "",
                Frequency: "",
                Location: "",
                Price: "",
                ServiceID: "",
                StartDate: "",
                EndDate: "",
                Description: "",
                StartSlot: "",
                EndSlot: "",
            });
        } catch (err) {
            console.error("L·ªói khi ƒëƒÉng c√¥ng vi·ªác:", err);
            setError("‚ùå ƒê√£ x·∫£y ra l·ªói khi ƒëƒÉng c√¥ng vi·ªác. Vui l√≤ng th·ª≠ l·∫°i.");
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="job-posting-container">
            <h1 className="job-posting-title">ƒêƒÉng Tin Tuy·ªÉn D·ª•ng</h1>

            {message && <p className="job-posting-alert job-posting-success">{message}</p>}
            {error && <p className="job-posting-alert job-posting-error">{error}</p>}

            <form onSubmit={handleSubmit} className="job-posting-form">
                {/* Ti√™u ƒë·ªÅ c√¥ng vi·ªác */}
                <div className="job-posting-group job-posting-full-width">
                    <label>Ti√™u ƒë·ªÅ c√¥ng vi·ªác</label>
                    <input type="text" name="JobName" className="job-posting-input" value={formData.JobName} onChange={handleChange} required />
                </div>

                {/* ƒê·ªãa ƒëi·ªÉm */}
                <div className="job-posting-group job-posting-full-width">
                    <label>ƒê·ªãa ƒëi·ªÉm</label>
                    <input type="text" name="Location" className="job-posting-input" value={formData.Location} onChange={handleChange} required />
                </div>

                {/* Lo·∫°i c√¥ng vi·ªác & T·∫ßn su·∫•t */}
                <div className="job-posting-row">
                    <div className="job-posting-group">
                        <label>Lo·∫°i c√¥ng vi·ªác</label>
                        <select name="ServiceID" className="job-posting-select" value={formData.ServiceID} onChange={handleChange} required>
                            <option value="">Ch·ªçn</option>
                            <option value="1">Gi√∫p vi·ªác theo gi·ªù</option>
                            <option value="2">Gi√∫p vi·ªác to√†n th·ªùi gian</option>
                            <option value="3">ChƒÉm s√≥c tr·∫ª</option>
                        </select>
                    </div>
                    <div className="job-posting-group">
                        <label>T·∫ßn su·∫•t</label>
                        <select name="Frequency" className="job-posting-select" value={formData.Frequency} onChange={handleChange} required>
                            <option value="">Ch·ªçn</option>
                            <option value="daily">H√†ng ng√†y</option>
                            <option value="weekly">H√†ng tu·∫ßn</option>
                            <option value="monthly">H√†ng th√°ng</option>
                        </select>
                    </div>
                </div>

                {/* M·ª©c l∆∞∆°ng & Th·ªùi gian l√†m vi·ªác */}
                <div className="job-posting-row">
                    <div className="job-posting-group">
                        <label>M·ª©c l∆∞∆°ng</label>
                        <input type="number" name="Price" className="job-posting-input" step="0.01" value={formData.Price} onChange={handleChange} required />
                    </div>
                    <div className="job-posting-group">
                        <label>Th·ªùi gian l√†m vi·ªác</label>
                        <div className="job-posting-time-inputs">
                            <input type="number" name="StartSlot" className="job-posting-input" min="1" value={formData.StartSlot} onChange={handleChange} placeholder="B·∫Øt ƒë·∫ßu" />
                            <span>-</span>
                            <input type="number" name="EndSlot" className="job-posting-input" min="1" value={formData.EndSlot} onChange={handleChange} placeholder="K·∫øt th√∫c" />
                        </div>
                    </div>
                </div>

                {/* Ng√†y b·∫Øt ƒë·∫ßu & Ng√†y k·∫øt th√∫c */}
                <div className="job-posting-row">
                    <div className="job-posting-group">
                        <label>Th·ªùi gian l√†m vi·ªác</label>
                        <div className="job-posting-time-inputs">
                            <input type="number" name="StartSlot" className="job-posting-time-input" min="1" value={formData.StartSlot} onChange={handleChange} placeholder="B·∫Øt ƒë·∫ßu" />
                            <span>-</span>
                            <input type="number" name="EndSlot" className="job-posting-time-input" min="1" value={formData.EndSlot} onChange={handleChange} placeholder="K·∫øt th√∫c" />
                        </div>
                    </div>
                </div>

                {/* M√¥ t·∫£ c√¥ng vi·ªác */}
                <div className="job-posting-group job-posting-full-width">
                    <label>M√¥ t·∫£ c√¥ng vi·ªác</label>
                    <textarea name="Description" className="job-posting-textarea" rows="3" value={formData.Description} onChange={handleChange}></textarea>
                </div>

                <button type="submit" className="job-posting-submit-btn btn-primary" disabled={loading}>
                    {loading ? "ƒêang ƒëƒÉng..." : "ƒêƒÉng Tin"}
                </button>
            </form>
        </div>
    );
};

export default JobPostingPage;
